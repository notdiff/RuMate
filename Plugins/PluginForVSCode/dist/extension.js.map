{"version":3,"file":"extension.js","mappings":"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","sources":["webpack://rumate/./node_modules/is-wsl/index.js","webpack://rumate/./node_modules/opn/index.js","webpack://rumate/./src/extension.ts","webpack://rumate/external commonjs \"vscode\"","webpack://rumate/external node-commonjs \"child_process\"","webpack://rumate/external node-commonjs \"fs\"","webpack://rumate/external node-commonjs \"os\"","webpack://rumate/external node-commonjs \"path\"","webpack://rumate/external node-commonjs \"util\"","webpack://rumate/webpack/bootstrap","webpack://rumate/webpack/startup"],"sourcesContent":["'use strict';\nconst os = require('os');\nconst fs = require('fs');\n\nconst isWsl = () => {\n\tif (process.platform !== 'linux') {\n\t\treturn false;\n\t}\n\n\tif (os.release().includes('Microsoft')) {\n\t\treturn true;\n\t}\n\n\ttry {\n\t\treturn fs.readFileSync('/proc/version', 'utf8').includes('Microsoft');\n\t} catch (err) {\n\t\treturn false;\n\t}\n};\n\nif (process.env.__IS_WSL_TEST__) {\n\tmodule.exports = isWsl;\n} else {\n\tmodule.exports = isWsl();\n}\n","'use strict';\nconst {promisify} = require('util');\nconst path = require('path');\nconst childProcess = require('child_process');\nconst isWsl = require('is-wsl');\n\nconst pExecFile = promisify(childProcess.execFile);\n\n// Convert a path from WSL format to Windows format:\n// `/mnt/c/Program Files/Example/MyApp.exe` â†’ `C:\\Program Files\\Example\\MyApp.exe``\nconst wslToWindowsPath = async path => {\n\tconst {stdout} = await pExecFile('wslpath', ['-w', path]);\n\treturn stdout.trim();\n};\n\nmodule.exports = async (target, options) => {\n\tif (typeof target !== 'string') {\n\t\tthrow new TypeError('Expected a `target`');\n\t}\n\n\toptions = {\n\t\twait: false,\n\t\t...options\n\t};\n\n\tlet command;\n\tlet appArguments = [];\n\tconst cliArguments = [];\n\tconst childProcessOptions = {};\n\n\tif (Array.isArray(options.app)) {\n\t\tappArguments = options.app.slice(1);\n\t\toptions.app = options.app[0];\n\t}\n\n\tif (process.platform === 'darwin') {\n\t\tcommand = 'open';\n\n\t\tif (options.wait) {\n\t\t\tcliArguments.push('-W');\n\t\t}\n\n\t\tif (options.app) {\n\t\t\tcliArguments.push('-a', options.app);\n\t\t}\n\t} else if (process.platform === 'win32' || isWsl) {\n\t\tcommand = 'cmd' + (isWsl ? '.exe' : '');\n\t\tcliArguments.push('/c', 'start', '\"\"', '/b');\n\t\ttarget = target.replace(/&/g, '^&');\n\n\t\tif (options.wait) {\n\t\t\tcliArguments.push('/wait');\n\t\t}\n\n\t\tif (options.app) {\n\t\t\tif (isWsl && options.app.startsWith('/mnt/')) {\n\t\t\t\tconst windowsPath = await wslToWindowsPath(options.app);\n\t\t\t\toptions.app = windowsPath;\n\t\t\t}\n\n\t\t\tcliArguments.push(options.app);\n\t\t}\n\n\t\tif (appArguments.length > 0) {\n\t\t\tcliArguments.push(...appArguments);\n\t\t}\n\t} else {\n\t\tif (options.app) {\n\t\t\tcommand = options.app;\n\t\t} else {\n\t\t\tconst useSystemXdgOpen = process.versions.electron || process.platform === 'android';\n\t\t\tcommand = useSystemXdgOpen ? 'xdg-open' : path.join(__dirname, 'xdg-open');\n\t\t}\n\n\t\tif (appArguments.length > 0) {\n\t\t\tcliArguments.push(...appArguments);\n\t\t}\n\n\t\tif (!options.wait) {\n\t\t\t// `xdg-open` will block the process unless stdio is ignored\n\t\t\t// and it's detached from the parent even if it's unref'd.\n\t\t\tchildProcessOptions.stdio = 'ignore';\n\t\t\tchildProcessOptions.detached = true;\n\t\t}\n\t}\n\n\tcliArguments.push(target);\n\n\tif (process.platform === 'darwin' && appArguments.length > 0) {\n\t\tcliArguments.push('--args', ...appArguments);\n\t}\n\n\tconst subprocess = childProcess.spawn(command, cliArguments, childProcessOptions);\n\n\tif (options.wait) {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tsubprocess.once('error', reject);\n\n\t\t\tsubprocess.once('close', exitCode => {\n\t\t\t\tif (exitCode > 0) {\n\t\t\t\t\treject(new Error(`Exited with code ${exitCode}`));\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tresolve(subprocess);\n\t\t\t});\n\t\t});\n\t}\n\n\tsubprocess.unref();\n\n\treturn subprocess;\n};\n","// // The module 'vscode' contains the VS Code extensibility API\n// // Import the module and reference it with the alias vscode in your code below\n// import * as vscode from 'vscode';\n\n// // This method is called when your extension is activated\n// // Your extension is activated the very first time the command is executed\n// export function activate(context: vscode.ExtensionContext) {\n\n// \t// Use the console to output diagnostic information (console.log) and errors (console.error)\n// \t// This line of code will only be executed once when your extension is activated\n// \tconsole.log('Congratulations, your extension \"rumate\" is now active!');\n\n// \t// The command has been defined in the package.json file\n// \t// Now provide the implementation of the command with registerCommand\n// \t// The commandId parameter must match the command field in package.json\n// \tconst disposable = vscode.commands.registerCommand('rumate.helloWorld', () => {\n// \t\t// The code you place here will be executed every time your command is executed\n// \t\t// Display a message box to the user\n// \t\tvscode.window.showInformationMessage('Hello World from RuMate!');\n// \t});\n\n// \tcontext.subscriptions.push(disposable);\n// }\n\n// // This method is called when your extension is deactivated\n// export function deactivate() {}\nimport * as vscode from 'vscode';\nconst opn = require('opn');\n\nexport function activate(context: vscode.ExtensionContext) {\n    let disposable = vscode.commands.registerCommand('extension.searchInGoogle', () => {\n        const editor = vscode.window.activeTextEditor;\n        if (editor) {\n            const selection = editor.selection;\n            const selectedText = editor.document.getText(selection);\n            const url = `http://rumate.tw1.su/talks/?a=new&q=${encodeURIComponent(selectedText)}`;\n            opn(url);\n        } else {\n            vscode.window.showInformationMessage('No text selected');\n        }\n    });\n\n    context.subscriptions.push(disposable);\n}\n\nexport function deactivate() {}\n\n","module.exports = require(\"vscode\");","module.exports = require(\"child_process\");","module.exports = require(\"fs\");","module.exports = require(\"os\");","module.exports = require(\"path\");","module.exports = require(\"util\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(265);\n"],"names":["os","fs","isWsl","process","platform","release","includes","readFileSync","err","env","__IS_WSL_TEST__","module","exports","promisify","path","childProcess","pExecFile","execFile","async","target","options","TypeError","command","wait","appArguments","cliArguments","childProcessOptions","Array","isArray","app","slice","push","replace","startsWith","windowsPath","stdout","trim","wslToWindowsPath","length","versions","electron","join","__dirname","stdio","detached","subprocess","spawn","Promise","resolve","reject","once","exitCode","Error","unref","context","disposable","vscode","commands","registerCommand","editor","window","activeTextEditor","selection","selectedText","document","getText","url","encodeURIComponent","opn","showInformationMessage","subscriptions","require","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","call"],"sourceRoot":""}